<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凉城丶忆梦</title>
  
  <subtitle>欢迎来到我的博客</subtitle>
  <link href="https://sw1128.github.io/atom.xml" rel="self"/>
  
  <link href="https://sw1128.github.io/"/>
  <updated>2022-02-26T11:49:05.996Z</updated>
  <id>https://sw1128.github.io/</id>
  
  <author>
    <name>zwhy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>绑定样式</title>
    <link href="https://sw1128.github.io/2022/02/26/style-binding/"/>
    <id>https://sw1128.github.io/2022/02/26/style-binding/</id>
    <published>2022-02-26T11:23:54.000Z</published>
    <updated>2022-02-26T11:49:05.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><div class="note info flat"><p>绑定class样式</p></div></h2><h3 id="字符串写法"><a href="#字符串写法" class="headerlink" title="字符串写法"></a>字符串写法</h3><p>适用于：样式的类名不确定，需要动态指定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;,</span><br><span class="line">        mood:&#x27;normal&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        changeMood()&#123;</span><br><span class="line">            const arr = [&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">            const index = Math.floor(Math.random()*3)</span><br><span class="line">            this.mood = arr[index]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="数组写法"><a href="#数组写法" class="headerlink" title="数组写法"></a>数组写法</h3><p>适用于：要绑定的样式个数不确定、名字也不确定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;,</span><br><span class="line">        classArr=[&#x27;happy&#x27;,&#x27;normal&#x27;,&#x27;sad&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h3><p>适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;,</span><br><span class="line">        classObj:&#123;</span><br><span class="line">            happy:false,</span><br><span class="line">            normal:true,</span><br><span class="line">            sad:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="note info flat"><p>绑定style样式</p></div></h2><h3 id="对象写法-1"><a href="#对象写法-1" class="headerlink" title="对象写法"></a>对象写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;,</span><br><span class="line">        styleObj:&#123;</span><br><span class="line">            fontSize: &#x27;40px&#x27;,</span><br><span class="line">            color:&#x27;red&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        styleObj2:&#123;</span><br><span class="line">            backgroundColor:&#x27;orange&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="数组写法-1"><a href="#数组写法-1" class="headerlink" title="数组写法"></a>数组写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;,</span><br><span class="line">        styleArr:[</span><br><span class="line">            &#123;</span><br><span class="line">                fontSize: &#x27;40px&#x27;,</span><br><span class="line">                color:&#x27;blue&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                backgroundColor:&#x27;gray&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="note info flat"><p>总结</p></div></h2><ol><li>class样式<br>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。<br>字符串写法适用于：类名不确定，要动态获取。<br>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。<br>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li><li>style样式<br>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值。<br>:style&#x3D;”[a,b]”其中a、b是样式对象。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;绑定class样式&lt;/p&gt;
&lt;/div&gt;&lt;/h2&gt;&lt;h3 id=&quot;字符串写法&quot;&gt;&lt;a href=&quot;#字符串写法</summary>
      
    
    
    
    <category term="Vue" scheme="https://sw1128.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>姓名案例——用计算属性和监视属性分别实现</title>
    <link href="https://sw1128.github.io/2022/02/19/name-example/"/>
    <id>https://sw1128.github.io/2022/02/19/name-example/</id>
    <published>2022-02-19T03:43:28.000Z</published>
    <updated>2022-02-19T06:07:45.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><div class="note info flat"><p>计算属性(computed)</p></div></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>要用的属性不存在，要通过已有属性计算得出</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>底层借助了<code>Object.defineproperty</code>方法提供的<code>getter</code>和<code>setter</code>。<br>get函数什么时候执行？<br>（1）初次读取时<br>（2）当依赖的数据发生改变时会被再次调用</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>与methods实现相比，内部有缓存机制（复用），效率更高，调试更方便</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>（1）计算属性最终会出现在vm上，直接读取使用即可<br>（2）如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</p><h3 id="计算属性实现姓名案例"><a href="#计算属性实现姓名案例" class="headerlink" title="计算属性实现姓名案例"></a>计算属性实现姓名案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">······</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        firstName:&#x27;张&#x27;,</span><br><span class="line">        lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        fullName()&#123;</span><br><span class="line">            return this.firstName + this.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="note info flat"><p>监视属性(watch)</p></div></h2><h3 id="监视的两种写法"><a href="#监视的两种写法" class="headerlink" title="监视的两种写法"></a>监视的两种写法</h3><p>(1)<code>new Vue</code>时传入<code>watch</code>配置(常用)<br>(2)通过<code>vm.$watch</code>监视</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>（1）当被监视的属性变化时, 回调函数自动调用, 进行相关操作<br>（2）监视的属性必须存在，才能进行监视</p><h3 id="监视属性实现姓名案例"><a href="#监视属性实现姓名案例" class="headerlink" title="监视属性实现姓名案例"></a>监视属性实现姓名案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">······</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        firstName:&#x27;张&#x27;,</span><br><span class="line">        lastName:&#x27;三&#x27;,</span><br><span class="line">        fullName:&#x27;张 三&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">        firstName(val)&#123;</span><br><span class="line">            this.fullName = val + &#x27; &#x27; + this.lastName</span><br><span class="line">        &#125;</span><br><span class="line">        lastName(val)&#123;</span><br><span class="line">            this.fullName = this.firstName + &#x27; &#x27; + val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="note info flat"><p>computed和watch之间的区别</p></div></h2><p>（1）computed能完成的功能，watch都可以完成。<br>（2）watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><div class="note info flat"><p>两个重要的小原则</p></div></h2><p>（1）所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。<br>（2）所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm或组件实例对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;计算属性(computed)&lt;/p&gt;
&lt;/div&gt;&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot;</summary>
      
    
    
    
    <category term="Vue" scheme="https://sw1128.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>el与data的两种写法</title>
    <link href="https://sw1128.github.io/2022/02/17/el-and-data/"/>
    <id>https://sw1128.github.io/2022/02/17/el-and-data/</id>
    <published>2022-02-17T05:28:34.000Z</published>
    <updated>2022-02-17T15:36:06.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><div class="note info flat"><p>el的两种写法</p></div></h3><h4 id="new-Vue时配置el属性"><a href="#new-Vue时配置el属性" class="headerlink" title="new Vue时配置el属性"></a><code>new Vue</code>时配置<code>el</code>属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#demo&#x27;, //第一种写法</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="mount-手动挂载"><a href="#mount-手动挂载" class="headerlink" title="$mount()手动挂载"></a><code>$mount()</code>手动挂载</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$mount(&#x27;#demo&#x27;)</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="note info flat"><p>data的两种写法</p></div></h3><h4 id="对象式"><a href="#对象式" class="headerlink" title="对象式"></a>对象式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#demo&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;zwhy&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#demo&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            name:&#x27;zwhy&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;el的两种写法&lt;/p&gt;
&lt;/div&gt;&lt;/h3&gt;&lt;h4 id=&quot;new-Vue时配置el属性&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Vue" scheme="https://sw1128.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Github Pages不显示七牛云外链图片的解决方法</title>
    <link href="https://sw1128.github.io/2022/02/15/use-pic/"/>
    <id>https://sw1128.github.io/2022/02/15/use-pic/</id>
    <published>2022-02-15T09:21:57.000Z</published>
    <updated>2022-02-16T08:47:57.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　前段时间开始写博客，图片资源都存储在本地，写的多了难免会觉得臃肿，于是想着搭建图床，把图片资源存储在七牛云上，要使用的时候直接通过外链调用。搭完之后，在<code>localhost</code>显示图片没有问题，但是部署到Github Pages上后访问网站，图片却显示不出来，通过添加<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;</code>也不起作用。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>　　七牛云图片外链使用的是http协议，而Github Pages使用的是https协议，导致读取失败。</p><center>七牛云👇</center><p><img src="https://s2.loli.net/2022/02/15/EFvV4GDuJUT5A1q.png" alt="image.png"></p><center>Github Pages👇</center><p><img src="https://s2.loli.net/2022/02/15/NfHz2ZSmsTnvgO6.png" alt="image.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>　　使用<a href="https://sm.ms/">SM.MS</a>搭建图床，5G的免费空间应该也够用了。</p><h2 id="图片正常显示，问题解决"><a href="#图片正常显示，问题解决" class="headerlink" title="图片正常显示，问题解决"></a>图片正常显示，问题解决</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;　　前段时间开始写博客，图片资源都存储在本地，写的多了难免会觉得臃肿，于是想着搭建图床，把图片资源存储在七牛云上，要使用的时</summary>
      
    
    
    
    <category term="Issues" scheme="https://sw1128.github.io/categories/Issues/"/>
    
    
  </entry>
  
  <entry>
    <title>Butterfly主题配置——如何使用阿里矢量图标库</title>
    <link href="https://sw1128.github.io/2022/02/15/add-icon/"/>
    <id>https://sw1128.github.io/2022/02/15/add-icon/</id>
    <published>2022-02-14T16:53:54.000Z</published>
    <updated>2022-02-15T05:53:53.242Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>　　在阅读了butterfly主题配置的官方文档之后，发现其对使用阿里图标库方法的描述存在一些不足，比如不能自定义图标的大小。下面说一下另一种方法：</p><h4 id="1-注册iconfont，新建项目之后，将图标添加到自己的项目中"><a href="#1-注册iconfont，新建项目之后，将图标添加到自己的项目中" class="headerlink" title="1.注册iconfont，新建项目之后，将图标添加到自己的项目中"></a>1.注册<a href="https://www.iconfont.cn/">iconfont</a>，新建项目之后，将图标添加到自己的项目中</h4><p><img src="https://s2.loli.net/2022/02/15/OaIdeL97Qy4Xm6D.png" alt="1644858299285.png"></p><h4 id="2-点击Font-class中的链接，复制下来"><a href="#2-点击Font-class中的链接，复制下来" class="headerlink" title="2.点击Font class中的链接，复制下来"></a>2.点击Font class中的链接，复制下来</h4><p><img src="https://s2.loli.net/2022/02/15/P1IA8rEbQdgkSKi.png" alt="1644858418158.png"></p><h4 id="3-在-x2F-source目录下新建文件夹-source-x2F-css，新建文件font-css，然后将刚刚复制的代码粘贴进去"><a href="#3-在-x2F-source目录下新建文件夹-source-x2F-css，新建文件font-css，然后将刚刚复制的代码粘贴进去" class="headerlink" title="3.在&#x2F;source目录下新建文件夹 source&#x2F;css，新建文件font.css，然后将刚刚复制的代码粘贴进去"></a>3.在&#x2F;source目录下新建文件夹 source&#x2F;css，新建文件font.css，然后将刚刚复制的代码粘贴进去</h4><p><img src="https://s2.loli.net/2022/02/15/QXNv8OScH2ZPqKC.png" alt="1644858543738.png"></p><h4 id="4-在-config-butterfly-yml文件中找到inject，按如图所示设置"><a href="#4-在-config-butterfly-yml文件中找到inject，按如图所示设置" class="headerlink" title="4.在_config.butterfly.yml文件中找到inject，按如图所示设置"></a>4.在_config.butterfly.yml文件中找到inject，按如图所示设置</h4><p><img src="https://s2.loli.net/2022/02/15/GT7msktLvuMdBbP.png" alt="1644858630557.png"></p><h4 id="5-引用格式"><a href="#5-引用格式" class="headerlink" title="5.引用格式"></a>5.引用格式</h4><p><img src="https://s2.loli.net/2022/02/15/b5OIHD3SGhxF9wR.png" alt="1644858725880.png"></p><p><font size="3px">至此图标已经可以正常显示，但是显示效果偏小</p><p><img src="https://s2.loli.net/2022/02/15/QZJwbt5S4NdnsU8.png" alt="1644858899041.png"></p><p>此时修改font.css文件里的font-size属性，默认是16px，我们改成22px，看一下效果<br><img src="https://s2.loli.net/2022/02/15/QXNv8OScH2ZPqKC.png" alt="1644858543738.png"><br><img src="https://s2.loli.net/2022/02/15/ilRGCpPkSLYM3Aq.png" alt="image.png"></p><p>除此之外，在iconfont项目中可以点击编辑来调整图标的大小和位置，修改完保存即可</font><br><img src="https://s2.loli.net/2022/02/15/8DsQAfTwLG9cX2z.png" alt="1644859085320.png"><br><img src="https://s2.loli.net/2022/02/15/i7kYhdO2jzKfUxg.png" alt="1644859102454.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;　　在阅读了butterfly主题配置的官方文档之后，发现其对使用阿里图标库方法的描述存在一些不足，比如不能自定义图标的大小。下面说一下另一种方法：&lt;/p&gt;
&lt;h4 id=&quot;1-注</summary>
      
    
    
    
    <category term="butterfly" scheme="https://sw1128.github.io/categories/butterfly/"/>
    
    
  </entry>
  
  <entry>
    <title>数据绑定</title>
    <link href="https://sw1128.github.io/2022/02/14/data-binding/"/>
    <id>https://sw1128.github.io/2022/02/14/data-binding/</id>
    <published>2022-02-14T08:46:04.000Z</published>
    <updated>2022-02-14T09:40:35.886Z</updated>
    
    <content type="html"><![CDATA[<h2>vue中有两种数据绑定的方式：</h2><p>1.单向绑定(v-bind):数据只能从data流向页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.双向绑定(v-model):数据不仅可以从data流向页面，还可以从页面流向data。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>以上为普通写法，为了方便，一般简写成以下形式：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span>   //v-bind:value =&gt; :value</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span>  //v-model:value =&gt; v-model</span><br></pre></td></tr></table></figure><br><div class="note danger modern"><p>注意：以下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上。</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-model:x</span>=<span class="string">&quot;name&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a><center>Tips</center></h3><pre><code>1.双向绑定一般都应用在表单类元素上（如：input、select等）2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</code></pre>]]></content>
    
    
    <summary type="html">Vue中的数据绑定</summary>
    
    
    
    <category term="Vue" scheme="https://sw1128.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>修改Hexo默认的渲染引擎</title>
    <link href="https://sw1128.github.io/2022/02/13/hexo-renderer/"/>
    <id>https://sw1128.github.io/2022/02/13/hexo-renderer/</id>
    <published>2022-02-13T15:15:21.000Z</published>
    <updated>2022-02-14T08:00:24.179Z</updated>
    
    <content type="html"><![CDATA[<p>　　Hexo自带的渲染引擎为hexo-renderer-marked，如果想修改为其他渲染引擎（这里以hexo-renderer-markdown-it为例），只需执行如下指令：</p><p>1.卸载默认的渲染引擎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>2.安装新的渲染引擎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><p>执行完成后即为更换成功，若想更换其他渲染引擎同理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　Hexo自带的渲染引擎为hexo-renderer-marked，如果想修改为其他渲染引擎（这里以hexo-renderer-markdown-it为例），只需执行如下指令：&lt;/p&gt;
&lt;p&gt;1.卸载默认的渲染引擎&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="Hexo" scheme="https://sw1128.github.io/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello vue</title>
    <link href="https://sw1128.github.io/2022/02/12/Hello-vue/"/>
    <id>https://sw1128.github.io/2022/02/12/Hello-vue/</id>
    <published>2022-02-12T15:50:22.000Z</published>
    <updated>2022-02-14T08:57:12.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Vue"><a href="#初识Vue" class="headerlink" title=" 初识Vue"></a><center> 初识Vue</h1><h2 id="Vue是什么？"><a href="#Vue是什么？" class="headerlink" title="Vue是什么？"></a>Vue是什么？</h2><p>　　Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="一个简单的例子👇"><a href="#一个简单的例子👇" class="headerlink" title=" 一个简单的例子👇"></a><center> 一个简单的例子👇</h2><h3 id="引入vue"><a href="#引入vue" class="headerlink" title="引入vue"></a>引入vue</h3><p>vue.js文件可在<a href="https://cn.vuejs.org/index.html">Vue官网</a>下载，分为开发版本和生产版本。在根目录新建js文件夹，然后将下载好的vue.js文件放入文件夹中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="准备好一个容器"><a href="#准备好一个容器" class="headerlink" title="准备好一个容器"></a>准备好一个容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;,Welcome to study vue！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止-vue-在启动时生成生产提示"><a href="#阻止-vue-在启动时生成生产提示" class="headerlink" title="阻止 vue 在启动时生成生产提示"></a>阻止 vue 在启动时生成生产提示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,     <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span><br><span class="line">    <span class="attr">data</span>:&#123;          <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zwhy&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;,Welcome to study vue！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;zwhy&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title=" 小结"></a><center> 小结</h1><pre><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；3.root容器里的代码被称为【Vue模板】；4.Vue实例和容器是一一对应的；5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；注意区分：js表达式 和 js代码(语句)  1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：     (1). a     (2). a+b     (3). demo(1)     (4). x === y ? &#39;a&#39; : &#39;b&#39;  2.js代码(语句)     (1). if()&#123;&#125;     (2). for()&#123;&#125;</code></pre>]]></content>
    
    
    <summary type="html">一起走进Vue的世界</summary>
    
    
    
    <category term="Vue" scheme="https://sw1128.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>代码块测试</title>
    <link href="https://sw1128.github.io/2022/02/11/First_Code/"/>
    <id>https://sw1128.github.io/2022/02/11/First_Code/</id>
    <published>2022-02-11T09:35:37.000Z</published>
    <updated>2022-02-14T07:40:39.524Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>) <span class="title class_">Console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>) <span class="title class_">Console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>) <span class="title class_">Console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这只是一个测试页，不用打开看了</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="https://sw1128.github.io/2022/02/10/Happy_new_year/"/>
    <id>https://sw1128.github.io/2022/02/10/Happy_new_year/</id>
    <published>2022-02-10T15:23:05.000Z</published>
    <updated>2022-02-14T16:26:04.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022，虎年大吉！"><a href="#2022，虎年大吉！" class="headerlink" title="2022，虎年大吉！"></a>2022，虎年大吉！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022，虎年大吉！&quot;&gt;&lt;a href=&quot;#2022，虎年大吉！&quot; class=&quot;headerlink&quot; title=&quot;2022，虎年大吉！&quot;&gt;&lt;/a&gt;2022，虎年大吉！&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
